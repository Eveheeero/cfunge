This is cfunge - a fast Beunge93/98/08 interpreter in C.

You will need Boehm-GC (http://www.hpl.hp.com/personal/Hans_Boehm/gc/) version
7 or later installed to run or compile this software. If you lack it you could
try building without garbage collector but IT IS UNSUPPORTED. If you still want
to try, enable LEAK_MODE option in cmake. If a bug only happens in this mode,
it probably won't get fixed.

Further you will need cmake (http://www.cmake.org/) to compile it.

Fingerprints
------------
It is planned to implement most or all of the existing fingerprints,
with some exceptions:
 * FNGR - Contradicts with 98 standard.
 * IMAP - Too intrusive.
 * MODE - Intrusive into IP handling.
 * TRDS - Exceedingly complex and intrusive.
 * WIND - Too complex to implement and not portable.

Short descriptions of implemented fingerprints:
 BASE I/O for numbers in other bases
 DIRF Directory functions extension (not available in sandbox mode)
 MODU Modulo Arithmetic Extension
 NULL Funge-98 Null Fingerprint
 ORTH Orthogonal Easement Library
 REFC Referenced Cells Extension
 ROMA Funge-98 Roman Numerals
 SUBR Subroutine extension
For more details please see the specs for each fingerprint.
In cases of undefined behaviour in fingerprints, cfunge mostly tries to do the
same thing as CCBI.


Undefined behaviour
-------------------
The Befunge98 standard leaves some things undefined, here is what we do for
some of those cases:
 * y pushes time in UTC not local time.
 * k with a negative argument reflects.
 * # across edge of funge-space may or may not skip first char after wrapping
   depending on exact situation.
 * ( and ) with a negative count reflects and doesn't pop any fingerprint.
 * Loaded fingerprints are inherited to child IPs at split (t).
 * stdout is only flushed at:
   * Newline (line feed, ASCII 10) printed using , instruction.
   * Any input instructions.
   * End of program.
 * Input buffering works as in CCBI.

Notes on different standards
----------------------------
The option -s 93 does not prevent the program from accessing outside the first
80x25 cells. Nor does it disallow instructions that didn't exist in 93. It does
however change space behaviour to match 93 style.

If a program depends on a instruction that is undefined in 93 to reflect, it
should be easy to replace such instructions with a r for reflect or any in the
range A-Z (and not load any fingerprint).

Further division by zero always returns 0 in all modes, though the Befunge93
specs says the interpreter should ask the user what result he/she wants in that
situation.

Sandbox mode
------------
Sandbox mode prevents befunge programs from doing "harmful" things, this
includes, but is not limited to:
 * Any file or filesystem IO is forbidden.
 * The environment variables it can see are restricted.
 * Non-safe fingerprints can not be loaded (this includes network and file
   system access as well as other things).
